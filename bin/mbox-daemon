#! /usr/bin/env ruby
require 'optparse'
require 'json'
require 'eventmachine'
require 'mbox'

options = {}

OptionParser.new do |o|
	options[:host]  = 'localhost'
	options[:port]  = 9001
	options[:every] = (ENV['MBOX_DAEMON_EVERY'] || 120).to_f
	options[:mail]  = {
		directory: ENV['MBOX_DAEMON_DIR'] || "#{ENV['HOME']}/mail",
		boxes:     (ENV['MBOX_DAEMON_BOXES'] || 'inbox').split(/\s*[;,]\s*/)
	}

	o.on '-h', '--host HOST', 'the host to bind to' do |value|
		options[:host] = value
	end

	o.on '-p', '--port PORT', 'the port to bind to' do |value|
		options[:port] = value.to_i
	end

	o.on '-e', '--every SECONDS', 'the seconds to check the email every' do |value|
		options[:every] = value.to_f
	end

	o.on '-m', '--mail-directory PATH', 'the path where the mailboxes are at' do |value|
		options[:mail][:directory] = File.realpath(File.expand_path(value))
	end

	o.on '-b', '--mail-boxes BOX...', Array, 'the mailboxes to check' do |value|
		options[:mail][:boxes].push(*value)
	end
end.parse!

%w[INT KILL].each {|sig|
	trap sig do
		EM.stop_event_loop
	end
}

class Connection < EventMachine::Protocols::LineAndTextProtocol
	@@unread = {}

	attr_accessor :boxes

	def receive_line (line)
		whole, target, command, rest = line.match(/^(.*?)\s+(.*?)(?:\s+(.+))?$/).to_a

		boxes = target == '*' ? @boxes : @boxes.select { |box| target.include? box.name }

		if command == 'list'
			command = rest

			if command == 'unread'
				send_response boxes.select { |box|
					if @@unread[box] && @@unread[box].last_check < [File.ctime(box.path), File.mtime(box.path)].max
						@@unread[box] = Struct.new(:status, :last_check).new(box.has_unread?, Time.new)
					else
						@@unread[box] ||= Struct.new(:status, :last_check).new(box.has_unread?, Time.new)
					end

					@@unread[box].status
				}.map(&:name)
			end
		end
	rescue Exception => e
		send_data %{{"error":#{e.to_s.inspect}}}
	end

	def send_response (data)
		send_data "#{data.to_json}\n"
	end
end

EM.run {
	boxes = options[:mail][:boxes].map {|name|
		Mbox.open("#{options[:mail][:directory]}/#{name}")
	}

	EM.start_server options[:host], options[:port], Connection do |c|
		c.boxes = boxes
	end

	EM.add_periodic_timer options[:every] do
		`fetchmail`
	end
}
